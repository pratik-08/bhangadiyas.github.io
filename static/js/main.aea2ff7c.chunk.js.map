{"version":3,"sources":["component/Contact.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Contact","props","state","className","href","target","rel","Component","Home","About","Navigation","exact","activeClassName","to","Main","path","component","App","x","y","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAGMA,G,wDAEJ,WAAYC,GAAsB,IAAD,8BAC/B,cAAMA,IAEDC,MAAQ,GAHkB,E,kGAW/B,OACE,6BAEI,uBACEC,UAAU,WACVC,KAAK,qDACLC,OAAO,SACPC,IAAI,uBAJN,iC,GAhBYC,c,cCShBC,EAAO,kBACX,yBAAKL,UAAU,QACb,+DACA,qFAIEM,EAAQ,kBACZ,yBAAKN,UAAU,SACb,wCACA,mLACA,qLAWEO,EAAa,kBACjB,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAASC,OAAK,EAACC,gBAAgB,UAAUC,GAAG,KAA5C,SACJ,4BAAI,kBAAC,IAAD,CAASF,OAAK,EAACC,gBAAgB,UAAUC,GAAG,UAA5C,UACJ,4BAAI,kBAAC,IAAD,CAASF,OAAK,EAACC,gBAAgB,UAAUC,GAAG,sBAA5C,eAKJC,EAAO,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOH,OAAK,EAACI,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOG,OAAK,EAACI,KAAK,SAASC,UAAWP,IACtC,kBAAC,IAAD,CAAOE,OAAK,EAACI,KAAK,qBAAqBC,UAAWhB,MA8CvCiB,E,kDAzCb,WAAYhB,GAAyB,IAAD,8BAClC,cAAMA,IACDC,MAAQ,CACXgB,EAAG,uBACHC,EAAG,wBAJ6B,E,qDAQlC,OACE,oCACE,yBAAKhB,UAAU,OACb,wDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAdQiB,IAAMb,WCxCJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aea2ff7c.chunk.js","sourcesContent":["// IMPORT PACKAGE REFERENCES\r\nimport React, { Component } from 'react';\r\n\r\nclass Contact extends Component {\r\n\r\n  constructor(props: Readonly<{}>) {\r\n    super(props);\r\n\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://pratik-08.github.io/bhangadiyas.github.io/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Bhangadiya's Family Tree\r\n        </a>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport { Contact };\r\n\r\n// import React from 'react';\r\n// import '../assest/less/style.less';\r\n// import container, { Props } from './contactContainer';\r\n\r\n// interface State {\r\n// }\r\n\r\n// export class RawContactPage extends React.Component<Props, State> {\r\n//   constructor(props: Props) {\r\n//     super(props);\r\n//   }\r\n\r\n//   public render() {\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <header className=\"App-header\">\r\n//           <p>\r\n\r\n//           </p>\r\n//           <a\r\n//             className=\"App-link\"\r\n//             href=\"https://pratik-08.github.io/bhangadiyas.github.io/\"\r\n//             target=\"_blank\"\r\n//             rel=\"noopener noreferrer\"\r\n//           >\r\n//             Bhangadiya's Family Tree\r\n//         </a>\r\n//         </header>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default container(RawContactPage);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Contact } from './component/Contact';\r\nimport { NavLink, Switch, Route } from 'react-router-dom';\r\ninterface State {\r\n  x: string,\r\n  y: string\r\n}\r\n\r\ninterface Props {\r\n}\r\n\r\nconst Home = () => (\r\n  <div className='home'>\r\n    <h1>Welcome to my portfolio website</h1>\r\n    <p> Feel free to browse around and learn more about me.</p>\r\n  </div>\r\n);\r\n\r\nconst About = () => (\r\n  <div className='about'>\r\n    <h1>About Me</h1>\r\n    <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi dolorum molestias?</p>\r\n    <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi dolorum molestias?</p>\r\n  </div>\r\n);\r\n\r\n// const Contact = () => (\r\n//   <div className='contact'>\r\n//     <h1>Contact Me</h1>\r\n//     <p>You can reach me via email: <strong>hello@example.com</strong></p>\r\n//   </div>\r\n// );\r\n\r\nconst Navigation = () => (\r\n  <nav>\r\n    <ul>\r\n      <li><NavLink exact activeClassName=\"current\" to='/'>Home</NavLink></li>\r\n      <li><NavLink exact activeClassName=\"current\" to='/about'>About</NavLink></li>\r\n      <li><NavLink exact activeClassName=\"current\" to='/component/Contact'>Contact</NavLink></li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nconst Main = () => (\r\n  <Switch>\r\n    <Route exact path='/' component={Home}></Route>\r\n    <Route exact path='/about' component={About}></Route>\r\n    <Route exact path='/component/Contact' component={Contact}></Route>\r\n  </Switch>\r\n);\r\n\r\nclass App extends React.Component<Props, State> {\r\n  constructor(props: Readonly<Props>) {\r\n    super(props);\r\n    this.state = {\r\n      x: \"This is x from state\",\r\n      y: \"This is y from state\"\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className='app'>\r\n          <h1>Bhangadiya's Family Tree</h1>\r\n          <Navigation />\r\n          <Main />\r\n        </div>\r\n\r\n        {/* <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <p>\r\n            </p>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://pratik-08.github.io/bhangadiyas.github.io/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Bhangadiya's Family Tree\r\n        </a>\r\n          </header>\r\n        </div>\r\n        <div>\r\n          <h1>{this.state.x}</h1>\r\n          <h2>{this.state.y}</h2>\r\n        </div>\r\n        <div>\r\n          <Contact />\r\n        </div> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}